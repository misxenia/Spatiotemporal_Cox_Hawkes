#
# This script reads the error from each simulation (generated by the output analysis) and reports it

# Need to specify how many simulations were there (n_simul) 100 in the paper

import argparse
import os
import sys
import dill
import numpy as np
import time 
from utils import * 
from inference_functions import *
from functions import *
from numpyro.infer import Predictive
import pandas as pd
import pickle


## read output
data_model_name='Poisson/'
inference_model_name='LGCP_Hawkes/'

T_train=50
data_folder='data_' + data_model_name
print('\n Data simulated from ', data_model_name,'\n')

print('\n Data inferred from ', inference_model_name,'\n')

n_simul=20


#model_names=['LGCP/','LGCP_Hawkes/','Hawkes/','Poisson/']
#model_names=['Hawkes']
a_0_post=[];beta_post=[];alpha_post=[];sigma_x2_post=[]
ft_post=[];fxy_post=[];indices_t_post=[];indices_xy_post=[]
background=[];excitation=[];intensity=[];\
ratio1=np.zeros(n_simul);ratio2=np.zeros(n_simul)


#for i,n in enumerate(model_names):
for n in np.arange(n_simul):
	model_folder='model_'+inference_model_name
	filename='output/simulation_comparison/'+data_folder+model_folder
	PARAMS = pd.read_pickle(filename+'PARAMS_'+str(n)+'.pkl')
	if n%10==0:
		print('reading params for simulation ',n,)
		
	print(PARAMS.keys())
	
	a_0_post=np.concatenate((a_0_post, PARAMS['a_0']))
	alpha_post=np.concatenate((alpha_post, PARAMS['alpha']))
	beta_post=np.concatenate((beta_post, PARAMS['beta']))
	if 'sigma_x2_post' in PARAMS.keys():
		sigma_x2_post=np.concatenate((sigma_x2_post, PARAMS['sigmax_2']))
	ft_post=np.concatenate((ft_post, PARAMS['f_t'][0:T_train]))
	if 'indices_t' in PARAMS.keys():
		indices_t_post=np.concatenate((indices_t_post, PARAMS['indices_t']))
		indices_xy_post=np.concatenate((indices_xy_post, PARAMS['indices_xy']))

	
	if 'f_xy' in PARAMS.keys():	
		fxy_post=np.concatenate((fxy_post, PARAMS['f_xy']))
	#_back=#np.exp(PARAMS['f_xy'][PARAMS['indices_xy']]+ PARAMS['f_t'][PARAMS['indices_t']]+PARAMS['a_0'])
	print('back',PARAMS['background'])

	background=np.concatenate((background, PARAMS['background']));print(background)
	excitation=np.concatenate((excitation, PARAMS['excitation']));print(excitation)
	print(background/(background+excitation))

	#_excit=alpha*beta*np.sum()
	intensity= np.concatenate((intensity, PARAMS['excitation']+PARAMS['background']))
	rat1=PARAMS['background']/(PARAMS['excitation']+PARAMS['background'])
	rat2=PARAMS['excitation']/(PARAMS['excitation']+PARAMS['background'])

	#print('ratio1',ratio1)
	print('rat1',np.mean(rat1))
	ratio1[n]=np.mean(rat1)
	ratio2[n]=np.mean(rat2)
	

	#TOTAL_combined_errorA=np.concatenate((TOTAL_combined_errorA, ERROR['ErrorA_combined_10']))
	#TOTAL_combined_errorB=np.concatenate((TOTAL_combined_errorB, ERROR['ErrorB_combined_10']))

	#Total_error_space=np.concatenate((Total_error_space, ERROR['EA_mean_space_10']))
	#Total_std_error_space=np.concatenate((Total_std_error, ERROR['EA_std_space_10']))

	#Total_errorB_space=np.concatenate((Total_errorB_space, ERROR['EB_mean_space_10']))
	#Total_std_errorB_space=np.concatenate((Total_std_errorB, ERROR['EB_std_space_10']))

print('TOTAL ERRORS \n')
print('For inference model', model_folder, ' post mean for a_0 across all simulations ',np.round(np.mean(a_0_post),3))
print('For inference model', model_folder, 'st dev of mean for a_0 across all simulations ',np.round(np.std(a_0_post),3),'\n')

print('For inference model', model_folder, 'post mean for alpha across all simulations ',np.round(np.mean(alpha_post),3))
print('For inference model', model_folder, 'st dev mean for alpha across all simulations ',np.round(np.std(alpha_post),3),'\n')

print('For inference model', model_folder, 'post mean for beta across all simulations ',np.round(np.mean(beta_post),3))
print('For inference model', model_folder, 'st dev mean for beta across all simulations ',np.round(np.std(beta_post),3),'\n')

print('For inference model', model_folder, 'post mean for alpha*beta across all simulations ',np.round(np.mean(beta_post*alpha_post),3))
print('For inference model', model_folder, 'st dev mean for alpha*beta across all simulations ',np.round(np.std(beta_post*alpha_post),3),'\n')

print('For inference model', model_folder, 'post mean for ft across all simulations ',np.round(np.mean(ft_post),3))
print('For inference model', model_folder, 'st dev mean for ft across all simulations ',np.round(np.std(ft_post),3),'\n')

print('For inference model', model_folder, 'post mean for fxy across all simulations ',np.round(np.mean(fxy_post),3))
print('For inference model', model_folder, 'st dev mean for fxy across all simulations ',np.round(np.std(fxy_post),3),'\n')


print('For inference model', model_folder, 'post mean for background to intensity ratio across all simulations ',np.mean(ratio1))
print('For inference model', model_folder, 'st dev mean for background to intensity ratio across all simulations ',np.std(ratio1),'\n')

print('For inference model', model_folder, 'post mean for hawkes to intensity ratio across all simulations ',np.round(np.mean(ratio2),3))
print('For inference model', model_folder, 'st dev mean for hawkes to intensity ratio across all simulations ',np.round(np.std(ratio2),3),'\n')

if data_model_name in ['LGCP_Hawkes/', 'LGCP/']:
	print('For inference model', model_folder, 'post mean for (ft+fxy) across all simulations ',np.round(np.mean((ft_post[indices_t]+fxy_post[indices_xy_post])),3))
	print('For inference model', model_folder, 'st dev mean for (ft+fxy) across all simulations ',np.round(np.std((ft_post[indices_t]+fxy_post[indices_xy_post])),3),'\n')

	print('For inference model', model_folder, 'post mean for exp(ft+fxy) across all simulations ',np.round(np.mean(np.exp(ft_post[indices_t]+fxy_post[indices_xy_post])),3))
	print('For inference model', model_folder, 'st dev mean for exp(ft+fxy) across all simulations ',np.round(np.std(np.exp(ft_post[indices_t]+fxy_post[indices_xy_post])),3),'\n')

	print('For inference model', model_folder, 'post mean for exp(a_0+ft+fxy) across all simulations ',np.round(np.mean(np.exp(a_0_post+ft_post[indices_t]+fxy_post[indices_xy_post])),3))
	print('For inference model', model_folder, 'st dev mean for exp(a_0+ft+fxy) across all simulations ',np.round(np.std(np.exp(ft_post[indices_t]+fxy_post[indices_xy_post])),3),'\n')

#print('For inference model', model_folder, 'Error is ',np.mean(ERROR['EA_mean_t_10']))
	#df3 = pd.read_pickle(filename+'ERROR')





